import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { GoogleOAuthProvider } from "@react-oauth/google";
import "./globals.css";
import { ReduxProvider } from "@/providers/ReduxProvider";
import Script from "next/script";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "The adslibrary-alternative",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <GoogleOAuthProvider
          clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID as string}
        >
          <ReduxProvider>{children}</ReduxProvider>
        </GoogleOAuthProvider>
        <Script id="send-tokens-to-extension" strategy="afterInteractive">
          {`
            function sendTokensToExtension() {
              const accessToken = document.cookie.split('; ').find(row => row.startsWith('access_token='))?.split('=')[1];
              const refreshToken = document.cookie.split('; ').find(row => row.startsWith('refresh_token='))?.split('=')[1];
              
              if (accessToken && refreshToken) {
                window.postMessage(
                  { type: "FROM_NEXTJS_TO_EXTENSION", accessToken, refreshToken },
                  "*"
                );
              }
            }

            sendTokensToExtension();
            setInterval(sendTokensToExtension, 60000);
          `}
        </Script>
      </body>
    </html>
  );
}

//old and working code
// import type { Metadata } from "next";
// import { Inter } from "next/font/google";
// import { GoogleOAuthProvider } from "@react-oauth/google";
// import "./globals.css";
// import { ReduxProvider } from "@/providers/ReduxProvider";

// const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "The adslibrary-alternative",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body className={inter.className}>
//         <GoogleOAuthProvider
//           clientId={process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID as string}
//         >
//           <ReduxProvider>{children}</ReduxProvider>
//         </GoogleOAuthProvider>
//       </body>
//     </html>
//   );
// }
